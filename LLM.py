import requests
from fpdf import FPDF
from datetime import datetime, timedelta
import random
from openpyxl import Workbook
from openpyxl.styles import Alignment, Border, Side, PatternFill, Font
from openpyxl.chart import BarChart, Reference
import markdown
import json 
from difflib import SequenceMatcher
import re
from functools import lru_cache
import openai
from dotenv import load_dotenv
import os
import tiktoken

load_dotenv()

class LLMResponder:
    def __init__(self, openai_api_key=None, index=None):
        self.context = []
        self.color_palette = [
            'FF9AA2', 'FFB7B2', 'FFDAC1', 'E2F0CB', 
            'B5EAD7', 'C7CEEA', 'F8B195', 'F67280',
            'C06C84', '6C5B7B', '355C7D'
        ]
        
        # Configuration GPT uniquement
        self.openai_api_key = openai_api_key or os.getenv('OPENAI_API_KEY')
        if not self.openai_api_key:
            raise ValueError("Cl√© API OpenAI requise")
            
        self.client = openai.OpenAI(api_key=self.openai_api_key)
        self.index = index
        self.tokenizer = tiktoken.get_encoding("cl100k_base")
        
        self._setup_darija_system()

    def _setup_darija_system(self):
        """Configure le syst√®me pour r√©pondre en darija marocaine"""
        
        # Instructions pour GPT en darija
        self.SYSTEM_PROMPTS = {
            "darija_arabic": """ÿ£ŸÜÿ™ ÿßŸÑŸÇÿ∑ÿ® ÿßŸÑÿ±ŸÇŸÖŸä ŸÑŸÑŸÅŸÑÿßÿ≠ÿ©ÿå ŸÖÿ≥ÿßÿπÿØ ÿ∞ŸÉŸä ŸÖÿ™ÿÆÿµÿµ ŸÅŸä ÿßŸÑŸÖÿ¨ÿßŸÑ ÿßŸÑŸÅŸÑÿßÿ≠Ÿä ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿä.
            ÿ¨ÿßŸàÿ® ÿ®ÿßŸÑÿØÿßÿ±ÿ¨ÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ© ÿ®ÿ≠ÿ±ŸàŸÅ ÿπÿ±ÿ®Ÿäÿ©ÿå ŸÉŸÜ ŸÖŸáŸÜŸä ŸàŸÖŸÅŸáŸàŸÖ.
            ÿ¨ÿßŸàÿ® ÿ∫Ÿäÿ± ŸÖŸÜ ÿßŸÑŸàÿ´ÿßÿ¶ŸÇ ÿ®ŸÑÿß ŸÖÿß ÿ™ÿ≤ŸäÿØ.""",
            
            "darija_latin": """Nta Pole Digital D'Agriculture, assistant IA specialist f domaine dyal l fla7a l maghribiya.
            Jaweb b darija maghribiya b horouf latinia, kun professional o accessible.
            jawb ghi mn les fichiers li 3ndek matzid walo.""",
            
            "french": """Vous √™tes le P√¥le Digital D'Agriculture, assistant IA sp√©cialis√© dans l'agriculture marocaine.
            R√©pondez en fran√ßais de mani√®re professionnelle mais accessible.
            Utilisez juste les fichier que je te offre et non plus."""
        }
        # System prompt pour la traduction
        self.TRANSLATION_PROMPT = """Tu es un expert en traduction darija marocaine vers fran√ßais.
        Traduis UNIQUEMENT la requ√™te en fran√ßais standard, sans ajouter d'explications.
        Concentre-toi sur les termes techniques agricoles et administratifs.
        R√©ponds seulement avec la traduction fran√ßaise."""
       
        # Vocabulaire √©tendu pour la d√©tection de darija
        self.darija_latin_vocab = {
            # Salutations et politesse
            "salam", "ahlan", "salamu", "labas", "bikhir", "hamdulillah", "baraka", "bslama",
            # Questions et interrogation
            "ash", "ashno", "kifash", "kif", "fin", "mnin", "wqt", "waqtash", "3lash", "3la", 
            "wach", "wash", "aji", "ajibo", "guli", "gul", "quli", "qul",
            # Mots courants
            "bzaf", "bzzaf", "ktir", "shwiya", "chwiya", "qalil", "zwin", "zwina", "ghzal",
            "ghzala", "bikhir", "mlih", "mzyan", "khaib", "khayb", "ma3ruf", "m3ruf",
            # Verbes d'action agricole
            "zarb", "zr3", "zra3", "sqa", "sqaya", "7sad", "hsad", "qta3", "qla3", "shuf",
            # Agriculture en darija
            "fla7a", "flaha", "zar3", "zr3", "7qla", "hqla", "ma", "trab", "bhayem", "b7ayem",
            "dgag", "djaj", "bqra", "bqar", "khalul", "khlul", "ghnam", "ghanam", "7lib", "hlib",
            # Conjonctions et pr√©positions
            "w", "wa", "wla", "ola", "la", "li", "lli", "dyal", "dial", "d", "f", "fi", "mn", "men",
            "3nd", "3and", "m3a", "ma3", "bla", "bila", "7ta", "hta", "ghir", "ghi", "kan", "kan",
        }
        
        self.arabic_patterns = [
            r'[\u0600-\u06FF]',  # Caract√®res arabes de base
            r'[\u0750-\u077F]',  # Suppl√©ments arabes
            r'[\uFB50-\uFDFF]',  # Formes de pr√©sentation arabes A
            r'[\uFE70-\uFEFF]'   # Formes de pr√©sentation arabes B
        ]

    def contient_arabe(self, texte):
        """D√©tecte si le texte contient des caract√®res arabes"""
        return bool(re.search(r'[\u0600-\u06FF]', texte))

    def is_greeting(self, query):
        """D√©tecte si la requ√™te est une salutation"""
        query_clean = query.lower().strip()
        
        # Salutations exactes
        exact_greetings = [
            "salam", "ahlan", "ŸÖÿ±ÿ≠ÿ®ÿß", "ÿßŸÑÿ≥ŸÑÿßŸÖ", "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ",
            "bonjour", "salut", "hello", "hi", "coucou", "hey"
        ]
        
        # V√©rification exacte
        if query_clean in exact_greetings:
            return True
            
        # V√©rification avec des variantes
        greeting_patterns = [
            r'^salam\s*(aleikum|3likoum)?$',
            r'^(bonjour|salut)\s*!?$',
            r'^(hello|hi|hey)\s*!?$',
            r'^\s*ŸÖÿ±ÿ≠ÿ®ÿß\s*$',
            r'^\s*ÿßŸÑÿ≥ŸÑÿßŸÖ\s*(ÿπŸÑŸäŸÉŸÖ)?\s*$'
        ]
        
        for pattern in greeting_patterns:
            if re.match(pattern, query_clean, re.IGNORECASE):
                return True
                
        return False

    def detect_language_advanced(self, query):
        """D√©tection avanc√©e de la langue avec support des 3 langues"""
        query_lower = query.lower().strip()
        
        # D√©tection de l'arabe
        if self.contient_arabe(query):
            return "darija_arabic"
        
        # Salutations sp√©cifiques
        if query_lower in ["salam", "ahlan"]:
            return "darija_latin"
            
        # D√©tection de mots darija en lettres latines
        darija_latin_count = sum(1 for word in self.darija_latin_vocab if word in query_lower)
        
        # Si plus de 2 mots darija d√©tect√©s, c'est probablement de la darija
        if darija_latin_count >= 2:
            return "darija_latin"
        
        # D√©tection de mots darija courants
        common_darija = ["kifash", "wach", "wash", "bzaf", "chwiya", "dyal", "3la", "mn", "fin"]
        if any(word in query_lower for word in common_darija):
            return "darija_latin"
        
        return "french"

    """ def translate_query_to_french(self, query, detected_lang):
        
        
        # Si c'est d√©j√† en fran√ßais, pas besoin de traduire
        if detected_lang == "french":
            print(f"[TRANSLATION] Requ√™te d√©j√† en fran√ßais: {query}")
            return query
        
        try:
            print(f"[TRANSLATION] Traduction de '{query}' ({detected_lang}) vers fran√ßais...")
            
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": self.TRANSLATION_PROMPT},
                    {"role": "user", "content": f"Traduis cette requ√™te en fran√ßais: {query}"}
                ],
                temperature=0.1,  # Tr√®s bas pour traduction pr√©cise
                max_tokens=200,
                top_p=0.9
            )
            
            translated = response.choices[0].message.content.strip()
            print(f"[TRANSLATION] R√©sultat: '{translated}'")
            
            return translated 
            
        except Exception as e:
            print(f"[TRANSLATION] Erreur lors de la traduction: {e}")
            # Fallback: retourner la requ√™te originale
            return query """

    def get_greeting_by_language(self, language):
        """Retourne une salutation appropri√©e selon la langue d√©tect√©e"""
        greetings = {
            "darija_arabic": "ÿßŸÑÿ≥ŸÑÿßŸÖ ÿπŸÑŸäŸÉŸÖ! ÿ£ŸÜÿß ÿßŸÑŸÇÿ∑ÿ® ÿßŸÑÿ±ŸÇŸÖŸä ŸÑŸÑŸÅŸÑÿßÿ≠ÿ©ÿå ŸÖÿ≥ÿßÿπÿØŸÉ ŸÅŸä ÿßŸÑŸÖÿ¨ÿßŸÑ ÿßŸÑŸÅŸÑÿßÿ≠Ÿä. ŸÉŸäŸÅ ŸäŸÖŸÉŸÜŸÜŸä ŸÖÿ≥ÿßÿπÿØÿ™ŸÉ ÿßŸÑŸäŸàŸÖÿü",
            "darija_latin": "Salam! Ana Pole Digital D'Agriculture, mosa3id dyalek f domaine dyal l fla7a. Kifash n9der n3awnek lyoum?",
            "french": "Bonjour ! Je suis le P√¥le Digital D'Agriculture, votre assistant sp√©cialis√© dans le domaine agricole. Comment puis-je vous aider aujourd'hui ?"
        }
        return greetings.get(language, greetings["french"])

    def update_context(self, query, response, max_context_length=5):
        """Met √† jour le contexte avec la nouvelle question et r√©ponse."""
        if len(self.context) >= max_context_length:
            self.context.pop(0)
        self.context.append({"query": query, "response": response})

    def get_context(self):
        """Retourne le contexte sous forme de cha√Æne de caract√®res."""
        return "\n".join(f"Question: {entry['query']}\nR√©ponse: {entry['response']}" for entry in self.context)

    def ask_gpt_darija(self, question, detected_lang="darija_latin", retrieved_context=None):
        """Fonction principale pour interroger GPT en darija"""
        
        # Pr√©paration du syst√®me prompt
        system_prompt = self.SYSTEM_PROMPTS.get(detected_lang, self.SYSTEM_PROMPTS["darija_latin"])
        
        # Construction du prompt utilisateur
        user_prompt = self._build_darija_prompt(question, detected_lang, retrieved_context)
        
        # Monitoring des tokens
        total_tokens = len(self.tokenizer.encode(system_prompt + user_prompt))
        print(f"üî¢ Tokens utilis√©s : {total_tokens}")
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": user_prompt}
                ],
                temperature=0.3,
                max_tokens=1500,
                top_p=0.9,
                frequency_penalty=0.2,
                presence_penalty=0.2
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            print(f"Erreur GPT: {e}")
            return f"Sma7 lia, kan 3andi mushkil f jawab. 3awd t9ad men ba3d. (Erreur: {str(e)})"

    def _build_darija_prompt(self, question, detected_lang, retrieved_context=None):
        """Construit le prompt pour GPT en darija"""
        
        context_part = ""
        if self.context:
            context_part = f"\n### Historique de la conversation ###\n{self.get_context()}\n"
        
        if retrieved_context:
            context_part += f"\n### Documents de r√©f√©rence ###\n{retrieved_context}\n"
        
        # Instructions selon la langue
        if detected_lang == "darija_arabic":
            instructions = """
            ### ÿ™ÿπŸÑŸäŸÖÿßÿ™ ###
            - ÿ¨ÿßŸàÿ® ÿ®ÿßŸÑÿØÿßÿ±ÿ¨ÿ© ÿßŸÑŸÖÿ∫ÿ±ÿ®Ÿäÿ© ÿ®ÿ≠ÿ±ŸàŸÅ ÿπÿ±ÿ®Ÿäÿ©
            - ŸÉŸÜ ŸÖŸáŸÜŸä ŸàŸÖŸÅŸáŸàŸÖ
            - ÿ∫Ÿäÿ± ŸÖŸÜ ÿßŸÑŸàÿ´ÿßÿ¶ŸÇ ÿ®ŸÑÿß ŸÖÿß ÿ™ÿ≤ŸäÿØ
            - ÿ±ŸÉÿ≤ ÿπŸÑŸâ ÿßŸÑÿ≥ÿ§ÿßŸÑ ÿßŸÑŸÖÿ∑ÿ±Ÿàÿ≠ ŸÅŸÇÿ∑
            - ÿ•ÿ∞ÿß Ÿàÿ¨ÿØÿ™ ŸÖÿπŸÑŸàŸÖÿßÿ™ ŸÅŸä ÿßŸÑŸàÿ´ÿßÿ¶ŸÇ ÿßŸÑŸÖÿ±ÿ¨ÿπŸäÿ©ÿå ÿßÿ≥ÿ™ÿÆÿØŸÖŸáÿß ŸÅŸä ÿ•ÿ¨ÿßÿ®ÿ™ŸÉ
            """
        elif detected_lang == "darija_latin":
            instructions = """
            ### Ta3limat ###
            - Jaweb b darija maghribiya b horouf latinia
            - Kun professional o mafhum
            - Ste3mel ghi lwata2i9 bla matzid
            - Rkez 3la su2al li t9ad ghir
            - Ila l9iti ma3lomat f documents, ste3melhom f jawab dyalek
            """
        else:  # french
            instructions = """
            ### Instructions ###
            - R√©pondez en fran√ßais
            - Soyez professionnel et accessible
            - Utilisez juste les fichier
            - Concentrez-vous uniquement sur la question pos√©e
            - Si vous trouvez des informations dans les documents de r√©f√©rence, utilisez-les dans votre r√©ponse
            """
        
        return f"""{instructions}
            {context_part}
            ### Su2al / Question ###
            {question}

            ### Jawab / R√©ponse ###"""

    def generate_response(self, query, retrieved_answer=None):
        """G√©n√®re une r√©ponse en darija via GPT"""
        
        print(f"[DEBUG] Requ√™te re√ßue: '{query}'")
        
        # D√©tection prioritaire des salutations
        if self.is_greeting(query):
            print("[DEBUG] Salutation d√©tect√©e!")
            detected_lang = self.detect_language_advanced(query)
            print(f"[DEBUG] Langue d√©tect√©e pour salutation: {detected_lang}")
            greeting_response = self.get_greeting_by_language(detected_lang)
            
            # Mise √† jour du contexte
            self.update_context(query, greeting_response)
            
            yield f"data: {json.dumps({'content': greeting_response, 'finished': True, 'language': detected_lang})}\n\n"
            return

        # D√©tection de la langue
        detected_lang = self.detect_language_advanced(query)
        print(f"[DEBUG] Langue d√©tect√©e: {detected_lang}")
        
        # Si pas de darija d√©tect√©e, forcer darija latin
        if detected_lang == "french":
            detected_lang = "darija_latin"
            print("[DEBUG] Langue forc√©e vers darija_latin")
        
        try:
            # Pr√©paration du contexte des documents
            context_docs = None
            if retrieved_answer:
                if isinstance(retrieved_answer, list):
                    context_docs = "\n\n".join(retrieved_answer[:3])  # Limiter √† 3 documents
                else:
                    context_docs = str(retrieved_answer)
                
                print(f"[DEBUG] Contexte documentaire trouv√©: {len(context_docs) if context_docs else 0} caract√®res")
            else:
                print("[DEBUG] Aucun contexte documentaire fourni")
            
            # Appel √† GPT avec la requ√™te ORIGINALE pour garder la r√©ponse en darija
            response_text = self.ask_gpt_darija(query, detected_lang, context_docs)
            
            # Mise √† jour du contexte
            self.update_context(query, response_text)
            
            # Formatage HTML
            formatted_response = self._format_response(response_text)
            
            yield f"data: {json.dumps({'content': formatted_response, 'finished': True, 'is_html': True, 'language': detected_lang})}\n\n"
            
        except Exception as e:
            error_msg = f"Sma7 lia, kan 3andi mushkil. 3awd t9ad men ba3d. (Erreur: {str(e)})"
            yield f"data: {json.dumps({'error': error_msg, 'finished': True, 'language': 'darija_latin'})}\n\n"

    def _format_response(self, text):
        """Formate la r√©ponse en HTML via Markdown"""
        html = markdown.markdown(text)
        return html

    def save_as_pdf(self, query, response_text):
        """Sauvegarde la question et la r√©ponse en PDF."""
        pdf = FPDF()
        pdf.add_page()
        pdf.add_font('DejaVu', '', 'DejaVuSans.ttf', uni=True)
        pdf.set_font('DejaVu', '', 12)
        pdf.cell(200, 10, txt="Question:",  ln=True) # type: ignore
        pdf.multi_cell(0, 10, txt=query)# type: ignore
        pdf.cell(200, 10, txt="R√©ponse:", ln=True)# type: ignore
        pdf.multi_cell(0, 10, txt=response_text)# type: ignore
        pdf.output("response.pdf")
        print("R√©ponse enregistr√©e en PDF.")

    def save_as_text(self, query, response_text):
        """Sauvegarde la question et la r√©ponse en texte."""
        with open("response.txt", 'w', encoding='utf-8') as file:
            file.write(f"Question:\n{query}\n\nR√©ponse:\n{response_text}")
        print("R√©ponse enregistr√©e en texte.")